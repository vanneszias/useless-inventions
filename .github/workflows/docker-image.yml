name: Docker Image CI and Deploy

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  # Build and Test the Docker Image
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: useless_inventions
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 3: Build Docker image
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag vanneszias/useless-inventions:${{ github.sha }} --tag vanneszias/useless-inventions:latest

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push vanneszias/useless-inventions:${{ github.sha }}
          docker push vanneszias/useless-inventions:latest

  # Deploy Docker Image to Azure Web App
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Deploy to Azure Web App using Docker Image from Docker Hub
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: "uselessinventions"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: vanneszias/useless-inventions:latest

      # Step 3: Verify Deployment (optional)
      - name: Verify Deployment (optional)
        run: |
          curl --fail http://uselessinventions.azurewebsites.net || exit 1
