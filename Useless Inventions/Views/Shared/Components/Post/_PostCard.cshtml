@using Useless_Inventions.Models
@model PostViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
<div class="glass-card mb-3 border-0 post-card h-100">
    <div class="card-body p-4">
        <div class="d-flex align-items-start mb-3">
            @if (!string.IsNullOrEmpty(Model.AvatarUrl))
            {
                <img src="@Model.AvatarUrl" class="rounded-circle me-3 flex-shrink-0" width="48" height="48" alt="User">
            }
            <div class="flex-grow-1">
                <div class="d-flex justify-content-between align-items-center">
                    <span class="fw-bold text-primary">@Model.User</span>
                    <span class="text-muted small">@Model.Time</span>
                </div>
            </div>
        </div>
        
        <div class="mb-3">
            <a href="/Inventions/Details/@Model.Id" class="text-dark text-decoration-none">
                <p class="mb-0">@Model.Content</p>
            </a>
        </div>
        
        @if (!string.IsNullOrEmpty((string?)Model.ImageUrl))
        {
            <div class="mb-3">
                <img src="@Model.ImageUrl" class="img-fluid rounded w-100" style="max-height: 300px; object-fit: cover;" alt="Invention image">
            </div>
        }
        
        <div class="d-flex justify-content-between align-items-center text-muted">
            <a href="/Inventions/Details/@Model.Id" class="btn p-0 d-flex align-items-center comment-btn" style="border: none; background: none; color: #6c757d; text-decoration: none;">
                <i class="bi bi-chat me-2" style="font-size: 1.1em;"></i>
                <span class="small">@Model.Comments</span>
            </a>
            
            @if (Model.Id != null)
            {
                <form class="d-inline" id="likeForm-@Model.Id" method="post" onclick="event.stopPropagation();">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetTokens(Context).RequestToken" />
                    <button type="submit" class="btn glass-btn-mini btn-sm d-flex align-items-center like-btn" 
                            style="border: none; background: none; color: @(Model.IsLiked ? "#dc3545" : "#6c757d"); text-decoration: none;" 
                            data-liked="@(Model.IsLiked ? "true" : "false")" onclick="event.stopPropagation();">
                        <span class="default-text d-flex align-items-center">
                            <i class="@(Model.IsLiked ? "bi bi-heart-fill" : "bi bi-heart") me-2 heart-icon" style="font-size: 1.1em;"></i>
                            <span class="like-count small">@Model.Likes</span>
                        </span>
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </form>
            }
        </div>
    </div>
    
    @if (Model.Id != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.getElementById('likeForm-@Model.Id');
                if (!form) return;
                const likeBtn = form.querySelector('.like-btn');
                const heartIcon = form.querySelector('.heart-icon');
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const btn = form.querySelector('button[type="submit"]');
                    btn.disabled = true;
                    btn.querySelector('.default-text').classList.add('d-none');
                    btn.querySelector('.spinner-border').classList.remove('d-none');
                    const formData = new FormData(form);
                    try {
                        const response = await fetch('/Inventions/ToggleLike', {
                            method: 'POST',
                            headers: { 'RequestVerificationToken': formData.get('__RequestVerificationToken') },
                            body: formData
                        });
                        if (!response.ok) throw new Error('Network response was not ok');
                        let likeCountElem = form.querySelector('.like-count');
                        let current = parseInt(likeCountElem.textContent);
                        if (!isNaN(current)) {
                            const isCurrentlyLiked = btn.dataset.liked === 'true';
                            if (isCurrentlyLiked) {
                                // Unlike
                                likeCountElem.textContent = current - 1;
                                btn.dataset.liked = 'false';
                                btn.style.color = '#6c757d';
                                heartIcon.className = 'bi bi-heart me-2 heart-icon';
                            } else {
                                // Like
                                likeCountElem.textContent = current + 1;
                                btn.dataset.liked = 'true';
                                btn.style.color = '#dc3545';
                                heartIcon.className = 'bi bi-heart-fill me-2 heart-icon';
                            }
                        }
                    } catch (err) {
                        console.error('Error:', err);
                    } finally {
                        btn.disabled = false;
                        btn.querySelector('.default-text').classList.remove('d-none');
                        btn.querySelector('.spinner-border').classList.add('d-none');
                    }
                });
            });
        </script>
    }
</div>
<style>
    .like-btn, .comment-btn {
        transition: transform 0.2s ease, color 0.2s;
    }
    .like-btn:hover {
        color: #dc3545 !important;
    }
    .like-btn[data-liked="false"]:hover .heart-icon {
        color: #dc3545;
    }
    .like-btn[data-liked="false"]:hover .heart-icon {
        content: '\f004'; /* bi-heart-fill */
    }
    .comment-btn:hover {
        color: #0d6efd !important;
    }
</style>