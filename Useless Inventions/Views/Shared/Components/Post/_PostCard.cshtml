@model dynamic
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
<div class="card mb-3 shadow-sm rounded-4 post-card h-100 border-0">
    <div class="card-body d-flex">
        <img src="/images/avatar-placeholder.png" class="rounded-circle me-3 flex-shrink-0" width="48" height="48" alt="User">
        <div class="flex-grow-1">
            <div class="d-flex justify-content-between align-items-center">
                @if (Model.Id != null)
                {
                    <a href="/Inventions/Details/@Model.Id" class="fw-bold text-decoration-none">@Model.User</a>
                }
                else
                {
                    <span class="fw-bold">@Model.User</span>
                }
                <span class="text-muted small">@Model.Time</span>
            </div>
            @if (!string.IsNullOrEmpty((string?)Model.ImageUrl))
            {
                <img src="@Model.ImageUrl" class="img-fluid rounded mb-2 mt-2 w-100" style="max-height: 300px; object-fit: cover;" alt="Invention image">
            }
            <div class="mt-1 mb-2">
                @if (Model.Id != null)
                {
                    <a href="/Inventions/Details/@Model.Id" class="text-dark text-decoration-none">@Model.Content</a>
                }
                else
                {
                    @Model.Content
                }
            </div>
            <div>
                <button class="btn btn-sm btn-outline-secondary me-2"><i class="bi bi-chat"></i> @Model.Comments</button>
                @if (Model.Id != null)
                {
                    <form class="d-inline" id="likeForm-@Model.Id" method="post">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetTokens(Context).RequestToken" />
                        <button type="submit" class="btn btn-sm btn-outline-danger">
                            <span class="default-text"><i class="bi bi-heart"></i> <span class="like-count">@Model.Likes</span></span>
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        </button>
                    </form>
                    <div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100;"></div>
                    <script>
                        document.addEventListener('DOMContentLoaded', function() {
                            const form = document.getElementById('likeForm-@Model.Id');
                            if (!form) return;
                            form.addEventListener('submit', async function(e) {
                                e.preventDefault();
                                const btn = form.querySelector('button[type="submit"]');
                                btn.disabled = true;
                                btn.querySelector('.default-text').classList.add('d-none');
                                btn.querySelector('.spinner-border').classList.remove('d-none');
                                const formData = new FormData(form);
                                try {
                                    const response = await fetch('/Inventions/ToggleLike', {
                                        method: 'POST',
                                        headers: { 'RequestVerificationToken': formData.get('__RequestVerificationToken') },
                                        body: formData
                                    });
                                    if (response.redirected) {
                                        window.location.href = response.url;
                                        return;
                                    }
                                    // Try to get new like count from response (if API returns it), else increment/decrement locally
                                    let likeCountElem = form.querySelector('.like-count');
                                    let current = parseInt(likeCountElem.textContent);
                                    if (!isNaN(current)) {
                                        likeCountElem.textContent = current + (btn.classList.contains('liked') ? -1 : 1);
                                        btn.classList.toggle('liked');
                                    }
                                    showToast('Like updated!', 'success');
                                } catch (err) {
                                    showToast('Failed to toggle like.', 'danger');
                                } finally {
                                    btn.disabled = false;
                                    btn.querySelector('.default-text').classList.remove('d-none');
                                    btn.querySelector('.spinner-border').classList.add('d-none');
                                }
                            });
                            function showToast(message, type) {
                                const container = document.getElementById('toast-container');
                                const toast = document.createElement('div');
                                toast.className = `toast align-items-center text-bg-${type} border-0 show mb-2`;
                                toast.setAttribute('role', 'alert');
                                toast.setAttribute('aria-live', 'assertive');
                                toast.setAttribute('aria-atomic', 'true');
                                toast.innerHTML = `<div class='d-flex'><div class='toast-body'>${message}</div><button type='button' class='btn-close btn-close-white me-2 m-auto' data-bs-dismiss='toast' aria-label='Close'></button></div>`;
                                container.appendChild(toast);
                                setTimeout(() => toast.remove(), 3000);
                            }
                        });
                    </script>
                }
            </div>
        </div>
    </div>
</div> 